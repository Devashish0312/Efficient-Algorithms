#include <iostream>
using namespace std;

int knap(int W, int wt[],int val[],int n)	//function to make a optimal substructure
{
	int k[n+1][W+1];
	int i,j;
	
	for(i=0;i<=n;i++)
		for(j=0;j<=W;j++)
			if(i==0 || j==0)		//if capacity is 0 or weight of particular item is 0
				k[i][j]=0;	
			else if(wt[i-1]<=j)		//if weight of a particular item is less than or equal to capacity at that iteration
				k[i][j]= max(val[i-1]+k[i-1][j-wt[i-1]], k[i-1][j]);
			else					//if weight of a particular item is more than or equal to capacity at that iteration
				k[i][j]= k[i-1][j];
				
	return k[n][W];
}
int main()
{
	int W;
	cin>>W;
	
	int n;
	cin>>n;
	int i;
	int wt[n],val[n];
	
	for(i=0;i<n;i++)
		cin>>wt[i];
	for(i=0;i<n;i++)
		cin>>val[i];
		
	cout<<knap(W,wt,val,n);
}
